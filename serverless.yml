service: serverless-appy-app

plugins:
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - test
  myStage: ${opt:stage, self:provider.stage}
  settings:
    test:
      ITEMS_DYNAMODB_TABLE: sls-appy-app-test
    dev:
      ITEMS_DYNAMODB_TABLE: sls-appy-app-dev
    prod:
      ITEMS_DYNAMODB_TABLE: sls-appy-app-prod
  

provider:
  name: aws
  runtime: nodejs10.x
  profile: default
  region: eu-west-2
  environment: ${self:custom.settings.${self:custom.myStage}}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:ListStreams"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.myStage}.ITEMS_DYNAMODB_TABLE}"

functions:
  createOwner:
    handler: handler.saveProfile
    events:
      - http:
          path: api/owners
          method: post
          cors: true
  createOffer:
    handler: handler.saveOffer
    events:        
      - http:
          path: api/offers
          method: post
          cors: true
  get:
    handler: handler.getItem
    events:
      - http:
          path: api/owners/{itemId}
          method: get
          cors: true
  list:
    handler: handler.listItem
    events:
      - http:
          path: api/offers
          method: get
          cors: true
  delete:
    handler: handler.deleteItem
    events:
        - http:
            path: api/owner/{itemId}
            method: delete
            cors: true
  updateOffer:
    handler: handler.updateOffer
    events:
      - http:
          path: api/offers/{itemId}
          method: put
          cors: true

  updateProfile:
    handler: handler.updateProfile
    events:
      - http:
          path: api/owners/{itemId}
          method: put
          cors: true

  getApi:
    handler: api/endpoints.endpoints
    events:
      - http:
          path: api
          method: get
          cors: true

  triggerStream:
    handler: handler.triggerStream
    events:
       - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - ImagesTable
              - StreamArn

resources:
  Resources:
    ImagesTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - AttributeName: "itemId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "itemId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.${self:custom.myStage}.ITEMS_DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE